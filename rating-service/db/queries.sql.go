// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createRating = `-- name: CreateRating :one
INSERT INTO ratings (dish_id, chef_id, user_id, rating, review_text)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, dish_id, chef_id, user_id, rating, review_text, created_at
`

type CreateRatingParams struct {
	DishID     string      `json:"dishId"`
	ChefID     string      `json:"chefId"`
	UserID     string      `json:"userId"`
	Rating     pgtype.Int4 `json:"rating"`
	ReviewText pgtype.Text `json:"reviewText"`
}

func (q *Queries) CreateRating(ctx context.Context, arg CreateRatingParams) (Rating, error) {
	row := q.db.QueryRow(ctx, createRating,
		arg.DishID,
		arg.ChefID,
		arg.UserID,
		arg.Rating,
		arg.ReviewText,
	)
	var i Rating
	err := row.Scan(
		&i.ID,
		&i.DishID,
		&i.ChefID,
		&i.UserID,
		&i.Rating,
		&i.ReviewText,
		&i.CreatedAt,
	)
	return i, err
}

const deleteRating = `-- name: DeleteRating :exec
DELETE FROM ratings
WHERE id = $1
`

func (q *Queries) DeleteRating(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteRating, id)
	return err
}

const getChefAverageRating = `-- name: GetChefAverageRating :one
SELECT chef_id, AVG(rating)::FLOAT AS average_rating
FROM ratings
WHERE chef_id = $1
GROUP BY chef_id
`

type GetChefAverageRatingRow struct {
	ChefID        string  `json:"chefId"`
	AverageRating float64 `json:"averageRating"`
}

func (q *Queries) GetChefAverageRating(ctx context.Context, chefID string) (GetChefAverageRatingRow, error) {
	row := q.db.QueryRow(ctx, getChefAverageRating, chefID)
	var i GetChefAverageRatingRow
	err := row.Scan(&i.ChefID, &i.AverageRating)
	return i, err
}

const getOrderAverageRating = `-- name: GetOrderAverageRating :one
SELECT dish_id, AVG(rating)::FLOAT AS average_rating
FROM ratings
WHERE dish_id = $1
GROUP BY dish_id
`

type GetOrderAverageRatingRow struct {
	DishID        string  `json:"dishId"`
	AverageRating float64 `json:"averageRating"`
}

func (q *Queries) GetOrderAverageRating(ctx context.Context, dishID string) (GetOrderAverageRatingRow, error) {
	row := q.db.QueryRow(ctx, getOrderAverageRating, dishID)
	var i GetOrderAverageRatingRow
	err := row.Scan(&i.DishID, &i.AverageRating)
	return i, err
}

const getRating = `-- name: GetRating :one
SELECT id, dish_id, chef_id, user_id, rating, review_text, created_at
FROM ratings
WHERE id = $1
`

func (q *Queries) GetRating(ctx context.Context, id int32) (Rating, error) {
	row := q.db.QueryRow(ctx, getRating, id)
	var i Rating
	err := row.Scan(
		&i.ID,
		&i.DishID,
		&i.ChefID,
		&i.UserID,
		&i.Rating,
		&i.ReviewText,
		&i.CreatedAt,
	)
	return i, err
}

const listRatings = `-- name: ListRatings :many
SELECT id, dish_id, chef_id, user_id, rating, review_text, created_at
FROM ratings
ORDER BY created_at DESC
`

func (q *Queries) ListRatings(ctx context.Context) ([]Rating, error) {
	rows, err := q.db.Query(ctx, listRatings)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Rating{}
	for rows.Next() {
		var i Rating
		if err := rows.Scan(
			&i.ID,
			&i.DishID,
			&i.ChefID,
			&i.UserID,
			&i.Rating,
			&i.ReviewText,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRatingsByChef = `-- name: ListRatingsByChef :many
SELECT id, dish_id, chef_id, user_id, rating, review_text, created_at
FROM ratings
WHERE chef_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListRatingsByChef(ctx context.Context, chefID string) ([]Rating, error) {
	rows, err := q.db.Query(ctx, listRatingsByChef, chefID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Rating{}
	for rows.Next() {
		var i Rating
		if err := rows.Scan(
			&i.ID,
			&i.DishID,
			&i.ChefID,
			&i.UserID,
			&i.Rating,
			&i.ReviewText,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRatingsByDish = `-- name: ListRatingsByDish :many
SELECT id, dish_id, chef_id, user_id, rating, review_text, created_at
FROM ratings
WHERE dish_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListRatingsByDish(ctx context.Context, dishID string) ([]Rating, error) {
	rows, err := q.db.Query(ctx, listRatingsByDish, dishID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Rating{}
	for rows.Next() {
		var i Rating
		if err := rows.Scan(
			&i.ID,
			&i.DishID,
			&i.ChefID,
			&i.UserID,
			&i.Rating,
			&i.ReviewText,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRatingsByUser = `-- name: ListRatingsByUser :many
SELECT id, dish_id, chef_id, user_id, rating, review_text, created_at
FROM ratings
WHERE user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListRatingsByUser(ctx context.Context, userID string) ([]Rating, error) {
	rows, err := q.db.Query(ctx, listRatingsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Rating{}
	for rows.Next() {
		var i Rating
		if err := rows.Scan(
			&i.ID,
			&i.DishID,
			&i.ChefID,
			&i.UserID,
			&i.Rating,
			&i.ReviewText,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRating = `-- name: UpdateRating :one
UPDATE ratings
SET rating = $2, review_text = $3
WHERE id = $1
RETURNING id, dish_id, chef_id, user_id, rating, review_text, created_at
`

type UpdateRatingParams struct {
	ID         int32       `json:"id"`
	Rating     pgtype.Int4 `json:"rating"`
	ReviewText pgtype.Text `json:"reviewText"`
}

func (q *Queries) UpdateRating(ctx context.Context, arg UpdateRatingParams) (Rating, error) {
	row := q.db.QueryRow(ctx, updateRating, arg.ID, arg.Rating, arg.ReviewText)
	var i Rating
	err := row.Scan(
		&i.ID,
		&i.DishID,
		&i.ChefID,
		&i.UserID,
		&i.Rating,
		&i.ReviewText,
		&i.CreatedAt,
	)
	return i, err
}
